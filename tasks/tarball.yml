---
- name: Create group
  group:
    name: zookeeper
    system: true

- name: Create user
  user:
    name: zookeeper
    group: zookeeper
    system: true

- name: Ensure the tarball dir exists at {{ zookeeper_tarball_dir }}
  file:
    path: "{{ zookeeper_tarball_dir }}"
    state: directory

- name: Ensure the zookeeper dir exists at {{ zookeeper_dir }}
  file:
    path: "{{ zookeeper_dir }}"
    state: directory

# If the file exists already, the S3 call can experience errors
- name: check whether the tarball is downloaded already
  stat:
    path: "{{ zookeeper_tarball_dir }}/zookeeper-{{ zookeeper_version }}.tar.gz"
  register: zookeeper_tarball_script

- name: Copy zookeeper from local
  copy:
    src: "{{ playbook_dir }}/files/zookeeper-{{ zookeeper_version }}.tar.gz"
    dest: "{{ zookeeper_tarball_dir }}/zookeeper-{{ zookeeper_version }}.tar.gz"
  when:
    - not zookeeper_download_from_mirror
    - not zookeeper_tarball_script.stat.exists

- name: Download zookeeper from S3
  aws_s3:
    mode: get
    bucket: "{{ zookeeper_archive_s3_bucket }}"
    object: "{{ zookeeper_archive_s3_object }}"
    dest: "{{ zookeeper_tarball_dir }}/zookeeper-{{ zookeeper_version }}.tar.gz"
  register: zookeeper_s3_tarball_downloaded
  tags:
    - bootstrap
  when:
    - zookeeper_archive_s3_object is defined
    - not zookeeper_tarball_script.stat.exists

- name: Download zookeeper version
  get_url:
    url: "{{ zookeeper_url }}"
    dest: "{{ zookeeper_tarball_dir }}/zookeeper-{{ zookeeper_version }}.tar.gz"
  register: zookeeper_tarball_downloaded
  when:
    - zookeeper_archive_s3_bucket is not defined or zookeeper_archive_s3_object is not defined
    - zookeeper_download_from_mirror
    - not zookeeper_tarball_script.stat.exists

- name: Unpack tarball.
  become: true
  unarchive:
    src: "{{ zookeeper_tarball_dir }}/zookeeper-{{ zookeeper_version }}.tar.gz"
    dest: "{{ zookeeper_dir }}"
    remote_src: yes
    owner: zookeeper
    group: zookeeper
    extra_opts:
    - --strip-components=1
  when: not zookeeper_tarball_script.stat.exists

#- name: Change ownership on zookeeper directory.
#  file: path={{ zookeeper_dir }} state=directory owner=zookeeper group=zookeeper
#  tags: bootstrap
- name: check whether the zookeeper_data_dir exist
  stat:
    path: "{{ zookeeper_data_dir }}"
  register: zookeeper_data_dir_check

- name: check whether the zookeeper_data_log_dir exist
  stat:
    path: "{{ zookeeper_data_log_dir }}"
  register: zookeeper_data_log_dir_check

- name: "Create zookeeper {{ item }} directory."
  file: path={{ item }} state=directory owner=zookeeper group=zookeeper
  tags: bootstrap
  with_items:
    - "{{ zookeeper_data_dir }}"
    - "{{ zookeeper_data_log_dir }}"
  when: not zookeeper_data_dir_check.stat.exists or not zookeeper_data_log_dir_check.stat.exists

- name: Write myid file
  template:
    src: "myid.j2"
    dest: "{{ zookeeper_conf_dir }}/conf/myid"
    owner: zookeeper
    group: zookeeper
    force: "{{ zookeeper_force_myid }}"
  notify:
    - Restart zookeeper

- name: Configure zookeeper zoo.cfg
  template:
    src: "zoo.cfg.j2"
    dest: "{{ zookeeper_dir }}/conf/zoo.cfg"
    owner: zookeeper
    group: zookeeper
  notify:
    - Restart zookeeper

- name: Add zookeeper's bin dir to the PATH
  copy:
    content: "export PATH=$PATH:{{ zookeeper_dir }}/bin"
    dest: "/etc/profile.d/zookeeper_path.sh"
    mode: 0755
  when:
    - zookeeper_register_path_env
